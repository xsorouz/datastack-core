# === Script de test 08b - V√©rification de l'absence de doublons apr√®s d√©doublonnage ===
# Ce script contr√¥le que les tables d√©doublonn√©es ne contiennent aucun doublon
# en v√©rifiant l‚Äôunicit√© des cl√©s primaires logiques : product_id ou sku.

import os
import sys
import duckdb
from pathlib import Path
from loguru import logger
import warnings

warnings.filterwarnings("ignore")

# ==============================================================================
# üîß Initialisation des logs
# ==============================================================================
AIRFLOW_LOG_PATH = os.getenv("AIRFLOW_LOG_PATH", "logs")
LOGS_PATH = Path(AIRFLOW_LOG_PATH)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

LOG_FILE = LOGS_PATH / "test_08_doublons.log"
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOG_FILE, level="INFO", rotation="500 KB")

# ==============================================================================
# üß™ Fonction principale : v√©rification des doublons
# ==============================================================================
def main():
    try:
        con = duckdb.connect("/opt/airflow/data/bottleneck.duckdb")
        logger.info("üß™ Connexion √† DuckDB r√©ussie.")
    except Exception as e:
        logger.error(f"‚ùå Connexion √©chou√©e : {e}")
        sys.exit(1)

    try:
        # üì¶ Test sur erp_dedup (cl√© : product_id)
        erp_dup = con.execute("""
            SELECT COUNT(*) - COUNT(DISTINCT product_id) FROM erp_dedup
        """).fetchone()[0]
        assert erp_dup == 0, f"‚ùå Doublons d√©tect√©s dans 'erp_dedup' : {erp_dup}"
        logger.success("‚úÖ Aucune duplication sur 'erp_dedup' (cl√© = product_id)")

        # üåê Test sur web_dedup (cl√© : sku)
        web_dup = con.execute("""
            SELECT COUNT(*) - COUNT(DISTINCT sku) FROM web_dedup
        """).fetchone()[0]
        assert web_dup == 0, f"‚ùå Doublons d√©tect√©s dans 'web_dedup' : {web_dup}"
        logger.success("‚úÖ Aucune duplication sur 'web_dedup' (cl√© = sku)")

        # üîó Test sur liaison_dedup (cl√© : product_id)
        liaison_dup = con.execute("""
            SELECT COUNT(*) - COUNT(DISTINCT product_id) FROM liaison_dedup
        """).fetchone()[0]
        assert liaison_dup == 0, f"‚ùå Doublons d√©tect√©s dans 'liaison_dedup' : {liaison_dup}"
        logger.success("‚úÖ Aucune duplication sur 'liaison_dedup' (cl√© = product_id)")

        logger.success("üéØ Test d‚Äôunicit√© post-d√©doublonnage valid√© avec succ√®s.")

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification des doublons : {e}")
        sys.exit(1)

# ==============================================================================
# üöÄ Lancement
# ==============================================================================
if __name__ == "__main__":
    main()
