# === Script 06 - Upload des fichiers nettoy√©s vers MinIO ===
# Ce script envoie les fichiers CSV nettoy√©s depuis 'data/outputs/'
# vers un bucket MinIO, dans le dossier 'data/outputs/'.

import os
import sys
import warnings
from pathlib import Path
import boto3
from botocore.exceptions import ClientError
from loguru import logger

# ==============================================================================
# üîß Initialisation du logger et des chemins
# ==============================================================================
warnings.filterwarnings("ignore")

AIRFLOW_LOG_PATH = os.getenv("AIRFLOW_LOG_PATH", "logs")
LOGS_PATH = Path(AIRFLOW_LOG_PATH)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

LOG_FILE = LOGS_PATH / "upload_clean_to_minio.log"
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOG_FILE, level="INFO", rotation="500 KB")

# ==============================================================================
# üöÄ Fonction principale d‚Äôupload vers MinIO
# ==============================================================================
def main():
    # üåç Param√®tres de connexion MinIO
    MINIO_ENDPOINT = os.getenv("MINIO_ENDPOINT", "http://minio:9000")
    ACCESS_KEY = os.getenv("MINIO_ACCESS_KEY", "admin")
    SECRET_KEY = os.getenv("MINIO_SECRET_KEY", "admin1234")
    BUCKET_NAME = os.getenv("MINIO_BUCKET_NAME", "bottleneck")
    DESTINATION_PREFIX = os.getenv("MINIO_DESTINATION_PREFIX", "data/outputs/")

    # üìÅ R√©pertoire des fichiers √† envoyer
    OUTPUTS_PATH = Path("/opt/airflow/data/outputs")
    OUTPUTS_PATH.mkdir(parents=True, exist_ok=True)

    files_to_upload = ["erp_clean.csv", "web_clean.csv", "liaison_clean.csv"]

    # üîå Connexion au client S3 (MinIO)
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=MINIO_ENDPOINT,
            aws_access_key_id=ACCESS_KEY,
            aws_secret_access_key=SECRET_KEY,
            region_name="us-east-1"
        )
        logger.success("‚úÖ Connexion √† MinIO √©tablie.")
    except Exception as e:
        logger.error(f"‚ùå Connexion √† MinIO √©chou√©e : {e}")
        sys.exit(1)

    # üì¶ V√©rification de l'existence du bucket
    try:
        s3_client.head_bucket(Bucket=BUCKET_NAME)
        logger.success(f"‚úÖ Bucket '{BUCKET_NAME}' trouv√©.")
    except ClientError as e:
        logger.error(f"‚ùå Le bucket '{BUCKET_NAME}' est inaccessible ou inexistant : {e}")
        sys.exit(1)

    # üì§ Envoi des fichiers
    logger.info("üì§ D√©marrage de l‚Äôupload des fichiers nettoy√©s vers MinIO...")

    for filename in files_to_upload:
        local_path = OUTPUTS_PATH / filename
        s3_key = f"{DESTINATION_PREFIX}{filename}"

        if not local_path.exists():
            logger.error(f"‚ùå Fichier introuvable localement : {local_path}")
            sys.exit(1)

        try:
            s3_client.upload_file(
                Filename=str(local_path),
                Bucket=BUCKET_NAME,
                Key=s3_key
            )
            logger.success(f"‚úÖ Upload r√©ussi : {filename} ‚ûî {s3_key}")
        except Exception as e:
            logger.error(f"‚ùå √âchec de l‚Äôupload de {filename} : {e}")
            sys.exit(1)

    logger.success("üéØ Tous les fichiers nettoy√©s ont √©t√© upload√©s avec succ√®s.")

# ==============================================================================
# üìå Point d‚Äôentr√©e du script
# ==============================================================================
if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue : {e}")
        sys.exit(1)
