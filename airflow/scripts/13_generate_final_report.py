# === Script 13 - G√©n√©ration du rapport final et upload dans MinIO ===
# Ce script synth√©tise toutes les m√©triques du pipeline, g√©n√®re un rapport final,
# l‚Äôexporte en CSV/XLSX et l‚Äôupload dans MinIO.

import os
import sys
import duckdb
import pandas as pd
import boto3
from botocore.exceptions import ClientError
from pathlib import Path
from loguru import logger
import warnings

warnings.filterwarnings("ignore")

# ==============================================================================
# üîß Initialisation des logs
# ==============================================================================
AIRFLOW_LOG_PATH = os.getenv("AIRFLOW_LOG_PATH", "logs")
LOGS_PATH = Path(AIRFLOW_LOG_PATH)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

LOG_FILE = LOGS_PATH / "rapport_final.log"
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOG_FILE, level="INFO", rotation="500 KB")

# ==============================================================================
# üìä Fonction principale
# ==============================================================================
def main():
    DATA_PATH = Path("/opt/airflow/data")
    DUCKDB_PATH = DATA_PATH / "bottleneck.duckdb"
    RAW_PATH = DATA_PATH / "inputs"
    OUTPUTS_PATH = DATA_PATH / "outputs"
    OUTPUTS_PATH.mkdir(parents=True, exist_ok=True)

    # ‚úÖ Connexion √† DuckDB
    if not DUCKDB_PATH.exists():
        logger.error(f"‚ùå Base DuckDB introuvable √† : {DUCKDB_PATH}")
        sys.exit(1)

    try:
        con = duckdb.connect(str(DUCKDB_PATH))
        logger.success("‚úÖ Connexion √† DuckDB √©tablie.")
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† DuckDB : {e}")
        sys.exit(1)

    # üì• R√©cup√©ration des m√©triques du pipeline
    try:
        logger.info("üìã R√©cup√©ration des m√©triques du pipeline...")

        metrics = {
            "ERP_brut": pd.read_csv(RAW_PATH / "erp.csv").shape[0],
            "Web_brut": pd.read_csv(RAW_PATH / "web.csv").shape[0],
            "Liaison_brut": pd.read_csv(RAW_PATH / "liaison.csv").shape[0],
            "ERP_nettoye": con.execute("SELECT COUNT(*) FROM erp_clean").fetchone()[0],
            "Web_nettoye": con.execute("SELECT COUNT(*) FROM web_clean").fetchone()[0],
            "Liaison_nettoye": con.execute("SELECT COUNT(*) FROM liaison_clean").fetchone()[0],
            "ERP_dedup": con.execute("SELECT COUNT(*) FROM erp_dedup").fetchone()[0],
            "Web_dedup": con.execute("SELECT COUNT(*) FROM web_dedup").fetchone()[0],
            "Liaison_dedup": con.execute("SELECT COUNT(*) FROM liaison_dedup").fetchone()[0],
            "Fusion": con.execute("SELECT COUNT(*) FROM fusion").fetchone()[0],
            "CA_total": con.execute("SELECT ca_total FROM ca_total").fetchone()[0],
            "Produits_CA": con.execute("SELECT COUNT(*) FROM ca_par_produit").fetchone()[0],
            "Vins_millesimes": pd.read_csv(OUTPUTS_PATH / "vins_millesimes.csv").shape[0],
        }

        logger.success("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s.")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des m√©triques : {e}")
        sys.exit(1)

    # üìÑ Construction et export du rapport
    try:
        df_report = pd.DataFrame([
            {"√âtape": "Brut - ERP", "R√©sultat": metrics["ERP_brut"], "Attendu": ""},
            {"√âtape": "Brut - Web", "R√©sultat": metrics["Web_brut"], "Attendu": ""},
            {"√âtape": "Brut - Liaison", "R√©sultat": metrics["Liaison_brut"], "Attendu": ""},
            {"√âtape": "Nettoy√© - ERP", "R√©sultat": metrics["ERP_nettoye"], "Attendu": ""},
            {"√âtape": "Nettoy√© - Web", "R√©sultat": metrics["Web_nettoye"], "Attendu": ""},
            {"√âtape": "Nettoy√© - Liaison", "R√©sultat": metrics["Liaison_nettoye"], "Attendu": ""},
            {"√âtape": "D√©doublonn√© - ERP", "R√©sultat": metrics["ERP_dedup"], "Attendu": "825"},
            {"√âtape": "D√©doublonn√© - Web", "R√©sultat": metrics["Web_dedup"], "Attendu": "714"},
            {"√âtape": "D√©doublonn√© - Liaison", "R√©sultat": metrics["Liaison_dedup"], "Attendu": "825"},
            {"√âtape": "Fusion finale", "R√©sultat": metrics["Fusion"], "Attendu": "714"},
            {"√âtape": "Produits CA", "R√©sultat": metrics["Produits_CA"], "Attendu": "573"},
            {"√âtape": "CA Total (‚Ç¨)", "R√©sultat": round(metrics["CA_total"], 2), "Attendu": "387837.60"},
            {"√âtape": "Vins Mill√©sim√©s", "R√©sultat": metrics["Vins_millesimes"], "Attendu": "30"},
        ])

        df_report.to_csv(OUTPUTS_PATH / "rapport_final.csv", index=False)
        df_report.to_excel(OUTPUTS_PATH / "rapport_final.xlsx", index=False)
        logger.success("üìÑ Rapport final g√©n√©r√© et export√© (CSV + XLSX).")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'export du rapport : {e}")
        sys.exit(1)

    # ‚òÅÔ∏è Upload vers MinIO
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=os.getenv("MINIO_ENDPOINT", "http://minio:9000"),
            aws_access_key_id=os.getenv("MINIO_ACCESS_KEY", "admin"),
            aws_secret_access_key=os.getenv("MINIO_SECRET_KEY", "admin1234"),
            region_name="us-east-1",
        )
        bucket_name = os.getenv("MINIO_BUCKET_NAME", "bottleneck")
        prefix = os.getenv("MINIO_DESTINATION_PREFIX", "data/outputs/")

        for filename in ["rapport_final.csv", "rapport_final.xlsx"]:
            local_path = OUTPUTS_PATH / filename
            s3_key = f"{prefix}{filename}"
            s3_client.upload_file(str(local_path), bucket_name, s3_key)
            logger.success(f"üöÄ Upload r√©ussi : {filename} ‚ûî {s3_key}")
    except Exception as e:
        logger.error(f"‚ùå √âchec de l‚Äôupload vers MinIO : {e}")
        sys.exit(1)

    logger.success("üéØ Rapport final archiv√© avec succ√®s dans MinIO.")

# ==============================================================================
# üöÄ Point d‚Äôentr√©e
# ==============================================================================
if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue : {e}")
        sys.exit(1)
